{"version":3,"sources":["webpack:///src/views/quota/subs/BasicQuotaType.vue","webpack:///./src/views/quota/subs/BasicQuotaType.vue?643a","webpack:///./src/views/quota/subs/BasicQuotaType.vue"],"names":["BasicQuotaType","name","mixins","components","data","tableWidth","showTree","typeTreeProp","label","children","isLeaf","formLabelWidth","aLevel","sParent","sLevel","typeForm","pid","code","addTypeVisible","addTypeTitle","page","pageSize","categoryTotal","beforeRouteEnter","to","from","next","created","mounted","this","setWidth","computed","methods","extends_default","Object","vuex_esm","singleWidth","window","innerWidth","eles","document","querySelectorAll","i","length","style","flexBasis","loadSubTypes","node","resolve","_this","loadingInstance","$loading","requestData","level","pageNum","childNodes","getCategoryListAction","then","res","close","list","count","setTimeout","catch","e","$message","error","id","getQuotaTypeDatas","updateChildren","clickTypeTree","obj","el","checked","$refs","typeTree","setChecked","startAddType","CHECKED_NODES","getCheckedNodes","warning","PLEVEL","getNode","startEditType","LEVEL","parent","checkForm","trim","submitTypeForm","editType","addType","parentData","_this2","updateKeyChildren","_this3","addCategoryAction","success","_this4","updateCategoryAction","classify","startDeleteType","_this5","DEL_ARR","getCheckedKeys","$confirm","confirmButtonText","showCancelButton","type","deleteType","action","console","log","_this6","deleteCategoryAction","filters","watch","destroyed","beforeRouteLeave","subs_BasicQuotaType","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","size","icon","on","click","_v","_m","ref","node-key","props","load","lazy","expand-on-click-node","check-strictly","empty-text","show-checkbox","node-click","scopedSlots","_u","key","fn","_s","_e","layout","current-page","page-size","total","update:currentPage","$event","current-change","title","visible","width","update:visible","model","label-width","placeholder","auto-complete","value","callback","$$v","$set","expression","slot","staticRenderFns","staticStyle","cellpadding","cellspacing","border","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"4IAyFAA,GACAC,KAAA,iBACAC,UACAC,cACAC,KAJA,WAKA,OACAC,WAAA,EACAC,UAAA,EACAC,cACAC,MAAA,OACAC,SAAA,QACAC,OAAA,QAEAC,eAAA,QACAC,QAAA,wBACAC,QAAA,GACAC,OAAA,GACAC,UACAC,IAAA,GACAf,KAAA,GACAgB,KAAA,IAEAC,gBAAA,EACAC,aAAA,GACAC,KAAA,EACAC,SAAA,GACAC,cAAA,IAGAC,iBA7BA,SA6BAC,EAAAC,EAAAC,GACAA,KAEAC,QAhCA,aAkCAC,QAlCA,WAmCAC,KAAAC,YAEAC,YACAC,QAAAC,OACAC,OAAAC,EAAA,EAAAD,EACA,6FAKAJ,SAPA,WAYA,IAJA,IAEAM,GAFAC,OAAAC,WACA,IACA,EACAC,EAAAC,SAAAC,iBAAA,6BACAC,EAAA,EAAAA,EAAAH,EAAAI,OAAAD,IACAH,EAAAG,GAAAE,MAAAC,UAAAT,EAAA,MASAU,aAtBA,SAsBAC,EAAAC,GAAA,IAAAC,EAAApB,KACAqB,EAAArB,KAAAsB,aACAC,KACA,IAAAL,EAAAM,OACAD,GACAE,QAAAzB,KAAAT,KACAC,SAAAQ,KAAAR,UAEA,IAAA0B,EAAAQ,WAAAZ,QACAd,KAAA2B,sBAAAJ,GAAAK,KAAA,SAAAC,GACAR,EAAAS,QACAX,EAAAU,EAAAE,MACAX,EAAA3B,cAAAoC,EAAAG,MACAC,WAAA,WACAb,EAAAnB,YACA,OACAiC,MAAA,SAAAC,GACAd,EAAAS,QACAV,EAAAgB,SAAAC,MAAAF,OAIAZ,GACApC,IAAA+B,EAAA3C,KAAA+D,IAEAtC,KAAA2B,sBAAAJ,GAAAK,KAAA,SAAAC,GACAR,EAAAS,QACAX,EAAAU,EAAAE,MACAE,WAAA,WACAb,EAAAnB,YACA,OAEAiC,MAAA,SAAAC,GACAd,EAAAS,QACAV,EAAAgB,SAAAC,MAAAF,OAIAI,kBA5DA,WA6DAvC,KAAAwC,kBAQAC,cArEA,SAqEAC,EAAAxB,EAAAyB,GACAzB,EAAA0B,QACA5C,KAAA6C,MAAAC,SAAAC,WAAAL,GAAA,MAEA1C,KAAA6C,MAAAC,SAAAC,WAAAL,GAAA,OAMAM,aA/EA,WAgFA,IAAAC,EAAAjD,KAAA6C,MAAAC,SAAAI,kBACA,GAAAD,EAAAnC,OAAA,EAEAd,KAAAoC,SAAAe,QAAA,iBAFA,CAIA,OAAAF,EAAAnC,OAEAd,KAAAhB,QAAA,IACAgB,KAAAf,OAAA,KACAe,KAAAd,UACAd,KAAA,GACAgB,KAAA,QAEA,CACA,IAAAgE,EAAApD,KAAA6C,MAAAC,SAAAO,QAAAJ,EAAA,GAAAX,IAAAd,MAEAxB,KAAAhB,QAAAiE,EAAA,GAAA7E,KACA4B,KAAAf,OAAAe,KAAAjB,OAAAqE,EAAA,GACApD,KAAAd,UACAC,IAAA8D,EAAA,GAAAX,GACAlE,KAAA,GACAgB,KAAA,IAGAY,KAAAV,aAAA,OACAU,KAAAX,gBAAA,IAKAiE,cA9GA,WA+GA,IAAAL,EAAAjD,KAAA6C,MAAAC,SAAAI,kBACA,OAAAD,EAAAnC,OAAA,CAKA,IAAAyC,EAAAvD,KAAA6C,MAAAC,SAAAO,QAAAJ,EAAA,GAAAX,IAAAd,MAEAxB,KAAAhB,QADAuE,EAAA,EACAvD,KAAA6C,MAAAC,SAAAO,QAAAJ,EAAA,GAAAX,IAAAkB,OAAAjF,KAAAH,KAEA,IAEA4B,KAAAf,OAAAe,KAAAjB,OAAAwE,GACAvD,KAAAd,UACAoD,GAAAW,EAAA,GAAAX,GACAlE,KAAA6E,EAAA,GAAA7E,KACAgB,KAAA6D,EAAA,GAAA7D,MAEAY,KAAAV,aAAA,OACAU,KAAAX,gBAAA,OAhBAW,KAAAoC,SAAAe,QAAA,aAqBAM,UAvIA,WAwIA,WAAAzD,KAAAd,SAAAd,KAAAsF,QACA1D,KAAAoC,SAAAe,QAAA,aACA,GAEA,MAAAnD,KAAAd,SAAAE,KAAA,IAAAsE,SACA1D,KAAAoC,SAAAe,QAAA,aACA,IAOAQ,eArJA,WAsJA3D,KAAAyD,cACAzD,KAAAd,SAAAoD,GACAtC,KAAA4D,WAEA5D,KAAA6D,YAOArB,eAjKA,SAiKAsB,GAAA,IAAAC,EAAA/D,KACAuB,KAOAA,EANAuC,GAOA3E,IAAA2E,EAAAxB,KALAb,QAAAzB,KAAAT,KACAC,SAAAQ,KAAAR,UAQAsE,EAMA9D,KAAA2B,sBAAAJ,GAAAK,KAAA,SAAAC,GACAkC,EAAAlB,MAAAC,SAAAkB,kBAAAF,EAAAxB,GAAAT,EAAAE,MACAE,WAAA,WACA8B,EAAA9D,YACA,OACAiC,MAAA,SAAAC,GACA4B,EAAA3B,SAAAC,MAAAF,MAXAnC,KAAAvB,UAAA,EACAwD,WAAA,WACA8B,EAAAtF,UAAA,GACA,OAeAoF,QAjMA,WAiMA,IAAAI,EAAAjE,KACAA,KAAAkE,kBAAAlE,KAAAd,UAAA0C,KAAA,SAAAC,GACAoC,EAAA7B,SAAA+B,QAAA,SACAF,EAAA5E,gBAAA,EAEA,IAAA4D,EAAAgB,EAAApB,MAAAC,SAAAI,kBACA,IAAAD,EAAAnC,OACAmD,EAAAzB,iBAEAyB,EAAAzB,eAAAS,EAAA,MAEAf,MAAA,SAAAC,GACA8B,EAAA7B,SAAAC,MAAAF,MAMAyB,SAnNA,WAmNA,IAAAQ,EAAApE,KACAA,KAAAqE,qBAAArE,KAAAd,UAAA0C,KAAA,SAAAC,GACAuC,EAAAhC,SAAA+B,QAAA,SACAC,EAAA/E,gBAAA,EAEA,IAAA4D,EAAAmB,EAAAvB,MAAAC,SAAAI,kBACA,IAAAD,EAAA,GAAAqB,SACAF,EAAA5B,iBAEA4B,EAAA5B,eAAA4B,EAAAvB,MAAAC,SAAAO,QAAAJ,EAAA,GAAAX,IAAAkB,OAAAjF,QAEA2D,MAAA,SAAAC,GACAiC,EAAAhC,SAAAC,MAAAF,MAGAoC,gBAlOA,WAkOA,IAAAC,EAAAxE,KACAyE,EAAAzE,KAAA6C,MAAAC,SAAA4B,iBACA,IAAAD,EAAA3D,OAGA2D,EAAA3D,OAAA,EACAd,KAAAoC,SAAAe,QAAA,YAGAnD,KAAA2E,SAAA,uBACAC,kBAAA,KACAC,kBAAA,EACAC,KAAA,YACAlD,KAAA,WACA4C,EAAAO,eACA7C,MAAA,SAAA8C,GACAC,QAAAC,IAAAF,KAbAhF,KAAAoC,SAAAe,QAAA,eAmBA4B,WAxPA,WAwPA,IAAAI,EAAAnF,KACAyE,EAAAzE,KAAA6C,MAAAC,SAAA4B,iBACA1E,KAAAoF,sBAAA9C,GAAAmC,EAAA,KAAA7C,KAAA,SAAAC,GACAsD,EAAA/C,SAAA+B,QAAA,SAEA,IAAAlB,EAAAkC,EAAAtC,MAAAC,SAAAI,kBACA,IAAAD,EAAA,GAAAqB,SACAa,EAAA3C,iBAEA2C,EAAA3C,eAAA2C,EAAAtC,MAAAC,SAAAO,QAAAJ,EAAA,GAAAX,IAAAkB,OAAAjF,QAEA2D,MAAA,SAAAC,GACAgD,EAAA/C,SAAAC,MAAAF,QAIAkD,WACAC,SACAC,UAhTA,aAkTAC,iBAlTA,SAkTA7F,EAAAC,EAAAC,GACAA,MCtYe4F,GADEC,OALjB,WAA0B,IAAAC,EAAA3F,KAAa4F,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAAA,EAAA,OAA2BE,YAAA,uCAAiDF,EAAA,aAAkBG,OAAOC,KAAA,QAAAC,KAAA,8BAAArB,KAAA,WAAqEsB,IAAKC,MAAAV,EAAA3C,gBAA0B2C,EAAAW,GAAA,YAAAX,EAAAW,GAAA,KAAAR,EAAA,aAAiDG,OAAOC,KAAA,QAAAC,KAAA,gBAAqCC,IAAKC,MAAAV,EAAArC,iBAA2BqC,EAAAW,GAAA,QAAAX,EAAAW,GAAA,KAAAR,EAAA,aAA6CG,OAAOC,KAAA,QAAAC,KAAA,kBAAuCC,IAAKC,MAAAV,EAAApB,mBAA6BoB,EAAAW,GAAA,YAAAX,EAAAW,GAAA,KAAAR,EAAA,OAA2CE,YAAA,aAAuBL,EAAAY,GAAA,GAAAZ,EAAAW,GAAA,KAAAX,EAAA,SAAAG,EAAA,OAAAA,EAAA,WAA+DU,IAAA,WAAAP,OAAsBQ,WAAA,KAAAC,MAAAf,EAAAjH,aAAAiI,KAAAhB,EAAA1E,aAAA2F,KAAA,GAAAC,wBAAA,EAAAC,iBAAA,GAAAC,aAAA,WAAAC,gBAAA,IAAuKZ,IAAKa,aAAAtB,EAAAlD,eAA+ByE,YAAAvB,EAAAwB,KAAsBC,IAAA,UAAAC,GAAA,SAAAb,GACp5B,IAAAtF,EAAAsF,EAAAtF,KACA3C,EAAAiI,EAAAjI,KACA,OAAAuH,EAAA,QAAkBE,YAAA,qBAA+BF,EAAA,QAAaE,YAAA,UAAoBL,EAAAW,GAAAX,EAAA2B,GAAA3B,EAAA5G,OAAAmC,EAAAM,OAAA,SAAAmE,EAAAW,GAAA,KAAAR,EAAA,QAAyEE,YAAA,WAAqBL,EAAAW,GAAAX,EAAA2B,GAAA/I,EAAAH,SAAAuH,EAAAW,GAAA,KAAAR,EAAA,QAAqDE,YAAA,WAAqBL,EAAAW,GAAAX,EAAA2B,GAAA/I,EAAAa,SAAAuG,EAAAW,GAAA,KAAAR,EAAA,QAAqDE,YAAA,WAAqBL,EAAAW,GAAAX,EAAA2B,GAAA3B,EAAA5G,OAAAmC,EAAAM,oBAAiD,GAAAmE,EAAA4B,KAAA5B,EAAAW,GAAA,KAAAX,EAAAlG,cAAA,EAAAqG,EAAA,iBAAuEE,YAAA,oBAAAC,OAAuCuB,OAAA,oBAAAC,eAAA9B,EAAApG,KAAAmI,YAAA/B,EAAAnG,SAAAmI,MAAAhC,EAAAlG,eAAwG2G,IAAKwB,qBAAA,SAAAC,GAAsClC,EAAApG,KAAAsI,GAAgBC,iBAAAnC,EAAApD,qBAAyCoD,EAAA4B,MAAA,GAAA5B,EAAAW,GAAA,KAAAR,EAAA,aAA2CG,OAAO8B,MAAApC,EAAArG,aAAA0I,QAAArC,EAAAtG,eAAA4I,MAAA,SAAsE7B,IAAK8B,iBAAA,SAAAL,GAAkClC,EAAAtG,eAAAwI,MAA4B/B,EAAA,WAAgBG,OAAOkC,MAAAxC,EAAAzG,YAAsB4G,EAAA,gBAAqBG,OAAOtH,MAAA,KAAAyJ,cAAAzC,EAAA7G,kBAA+CgH,EAAA,YAAiBG,OAAOoC,YAAA,UAAAC,gBAAA,OAA8CH,OAAQI,MAAA5C,EAAAzG,SAAA,KAAAsJ,SAAA,SAAAC,GAAmD9C,EAAA+C,KAAA/C,EAAAzG,SAAA,OAAAuJ,IAAoCE,WAAA,oBAA6B,GAAAhD,EAAAW,GAAA,KAAAR,EAAA,gBAAqCG,OAAOtH,MAAA,KAAAyJ,cAAAzC,EAAA7G,kBAA+CgH,EAAA,YAAiBG,OAAOoC,YAAA,UAAAC,gBAAA,OAA8CH,OAAQI,MAAA5C,EAAAzG,SAAA,KAAAsJ,SAAA,SAAAC,GAAmD9C,EAAA+C,KAAA/C,EAAAzG,SAAA,OAAAuJ,IAAoCE,WAAA,oBAA6B,GAAAhD,EAAAW,GAAA,KAAAR,EAAA,gBAAqCG,OAAOtH,MAAA,KAAAyJ,cAAAzC,EAAA7G,kBAA+CgH,EAAA,QAAAH,EAAAW,GAAAX,EAAA2B,GAAA3B,EAAA1G,aAAA0G,EAAAW,GAAA,KAAAR,EAAA,gBAA2EG,OAAOtH,MAAA,MAAAyJ,cAAAzC,EAAA7G,kBAAgDgH,EAAA,QAAAH,EAAAW,GAAAX,EAAA2B,GAAA3B,EAAA3G,eAAA,GAAA2G,EAAAW,GAAA,KAAAR,EAAA,OAAuEE,YAAA,gBAAAC,OAAmC2C,KAAA,UAAgBA,KAAA,WAAe9C,EAAA,aAAkBM,IAAIC,MAAA,SAAAwB,GAAyBlC,EAAAtG,gBAAA,MAA6BsG,EAAAW,GAAA,SAAAX,EAAAW,GAAA,KAAAR,EAAA,aAA8CG,OAAOnB,KAAA,WAAiBsB,IAAKC,MAAAV,EAAAhC,kBAA4BgC,EAAAW,GAAA,sBAEz8DuC,iBADjB,WAAoC,IAAajD,EAAb5F,KAAa6F,eAA0BC,EAAvC9F,KAAuC+F,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,qEAAA8C,aAA8Fb,MAAA,UAAgBnC,EAAA,OAAYE,YAAA,6BAAuCF,EAAA,SAAcE,YAAA,mBAAA8C,aAA4Cb,MAAA,QAAehC,OAAQ8C,YAAA,IAAAC,YAAA,IAAAC,OAAA,OAAkDnD,EAAA,SAAAA,EAAA,MAAAA,EAAA,MAAgCE,YAAA,eAAyBF,EAAA,OAAYE,YAAA,SAAzbhG,KAA4csG,GAAA,YAA5ctG,KAA4csG,GAAA,KAAAR,EAAA,MAA0CE,YAAA,eAAyBF,EAAA,OAAYE,YAAA,SAA3hBhG,KAA8iBsG,GAAA,UAA9iBtG,KAA8iBsG,GAAA,KAAAR,EAAA,MAAwCE,YAAA,eAAyBF,EAAA,OAAYE,YAAA,SAA3nBhG,KAA8oBsG,GAAA,UAA9oBtG,KAA8oBsG,GAAA,KAAAR,EAAA,MAAwCE,YAAA,eAAyBF,EAAA,OAAYE,YAAA,SAA3tBhG,KAA8uBsG,GAAA,uBCDlxB,IAcA4C,EAdyBC,EAAQ,OAcjCC,CACEjL,EACAsH,GATF,EAVA,SAAA4D,GACEF,EAAQ,SAaV,kBAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/2.ef6d21b02fc44d2facaf.js","sourcesContent":["<template>\n    <div>\n        <div class=\"handle-panel bg-gray-lightest p-10\">\n            <el-button size=\"small\" icon=\"el-icon-circle-plus-outline\" type=\"primary\" @click=\"startAddType\">新增下级节点</el-button>\n            <el-button size=\"small\" icon=\"el-icon-edit\" @click=\"startEditType\">修改</el-button>\n            <el-button size=\"small\" icon=\"el-icon-delete\" @click=\"startDeleteType\">删除</el-button>\n        </div>\n        <div class=\"list-box\">\n            <div class=\"el-table el-table--fit el-table--border el-table--enable-row-hover\" style=\"width: 100%;\">\n                <div class=\"el-table__header-wrapper\">\n                    <table class=\"el-table__header\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"width: 100%;\">\n                        <thead>\n                        <tr>\n                            <th class=\"text-black\"><div class=\"cell\">节点类型</div></th>\n                            <th class=\"text-black\"><div class=\"cell\">名称</div></th>\n                            <th class=\"text-black\"><div class=\"cell\">代码</div></th>\n                            <th class=\"text-black\"><div class=\"cell\">级别</div></th>\n                        </tr>\n                        </thead>\n                    </table>\n                </div>\n            </div>\n\n            <div v-if=\"showTree\">\n                <el-tree\n                    node-key=\"id\"\n                    :props=\"typeTreeProp\"\n                    :load=\"loadSubTypes\"\n                    lazy\n                    :expand-on-click-node=\"false\"\n                    check-strictly\n                    @node-click=\"clickTypeTree\"\n                    empty-text=\"暂无基础指标类型\"\n                    ref=\"typeTree\"\n                    show-checkbox\n                    >\n                    <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n                        <span class=\"-type\">{{ aLevel[node.level] + '节点' }}</span>\n                        <span class=\"-field\">{{ data.name }}</span>\n                        <span class=\"-field\">{{ data.code }}</span>\n                        <span class=\"-field\">{{ aLevel[node.level] }}</span>\n                    </span>\n                </el-tree>\n            </div>\n\n            <el-pagination\n                v-if=\"categoryTotal > 0\"\n                class=\"text-right m-t-20\"\n                layout=\"prev, pager, next\"\n                :current-page.sync=\"page\"\n                :page-size=\"pageSize\"\n                :total=\"categoryTotal\"\n                @current-change=\"getQuotaTypeDatas\"\n            >\n            </el-pagination>\n        </div>\n\n        <!-- 添加/编辑 基础指标类型 弹窗start -->\n        <el-dialog\n            :title=\"addTypeTitle\"\n            :visible.sync=\"addTypeVisible\"\n            width=\"400px\"\n        >\n            <el-form :model=\"typeForm\">\n                <el-form-item label=\"名称\" :label-width=\"formLabelWidth\">\n                    <el-input v-model=\"typeForm.name\" placeholder=\"请输入节点名称\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"代码\" :label-width=\"formLabelWidth\">\n                    <el-input v-model=\"typeForm.code\" placeholder=\"请输入节点代码\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"级别\" :label-width=\"formLabelWidth\">\n                    <span>{{sLevel}}</span>\n                </el-form-item>\n                <el-form-item label=\"父节点\" :label-width=\"formLabelWidth\">\n                    <span>{{sParent}}</span>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"addTypeVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"submitTypeForm\">确 定</el-button>\n            </div>\n        </el-dialog>\n        <!-- 添加/编辑 基础指标类型 弹窗end -->\n    </div>\n</template>\n\n<script>\n    import {mapActions} from 'vuex';\n\n    export default {\n        name: 'BasicQuotaType',\n        mixins: [],\n        components: {},\n        data() {\n            return {\n                tableWidth: 0,\n                showTree: true,\n                typeTreeProp: { // 指标类型tree组件的字段指定\n                    label: 'name',\n                    children: 'zones',\n                    isLeaf: 'leaf'\n                },\n                formLabelWidth: '120px',\n                aLevel: ['', '一级', '二级', '三级', '四级'],\n                sParent: '', // 用于添加/修改时展示\n                sLevel: '', // 用于添加/修改时展示\n                typeForm: { // 新增指标表单数据\n                    pid: '',\n                    name: '',\n                    code: ''\n                },\n                addTypeVisible: false,\n                addTypeTitle: '',\n                page: 1,\n                pageSize: 20,\n                categoryTotal: 0\n            }\n        },\n        beforeRouteEnter(to, from, next) {\n            next();\n        },\n        created() {\n        },\n        mounted() {\n            this.setWidth();\n        },\n        computed: {},\n        methods: {\n            ...mapActions([\n                'getCategoryListAction', 'addCategoryAction', 'updateCategoryAction', 'deleteCategoryAction'\n            ]),\n            /***\n             * 用于设置每列宽度（tee组件仿造table）\n             */\n            setWidth() {\n                const clientW = window.innerWidth;\n                const tableWidth = clientW - 20*2;// 20 - 两边的padding值\n                const singleWidth = tableWidth / 4;\n                const eles = document.querySelectorAll('.custom-tree-node .-field');\n                for(let i=0; i< eles.length; i++) {\n                    eles[i].style.flexBasis = singleWidth + 'px';\n                }\n            },\n            /***\n             * 动态获取树节点\n             * @param node\n             * @param resolve\n             * @returns {*}\n             */\n            loadSubTypes(node, resolve) {\n                let loadingInstance = this.$loading({});\n                let requestData = {};\n                if(node.level === 0) { // 根节点\n                    requestData = {\n                        pageNum: this.page,\n                        pageSize: this.pageSize\n                    };\n                    if(node.childNodes.length === 0) {\n                        this.getCategoryListAction(requestData).then(res => {\n                            loadingInstance.close();\n                            resolve(res.list);\n                            this.categoryTotal = res.count;\n                            setTimeout(() => {\n                                this.setWidth();\n                            }, 200);\n                        }).catch(e => {\n                            loadingInstance.close();\n                            this.$message.error(e);\n                        });\n                    }\n                } else { //\n                    requestData = {\n                        pid: node.data.id\n                    };\n                    this.getCategoryListAction(requestData).then(res => {\n                        loadingInstance.close();\n                        resolve(res.list);\n                        setTimeout(() => {\n                            this.setWidth();\n                        }, 200);\n\n                    }).catch(e => {\n                        loadingInstance.close();\n                        this.$message.error(e);\n                    });\n                }\n            },\n            getQuotaTypeDatas() {\n                this.updateChildren();\n            },\n            /***\n             * 点击树节点的回调\n             * @param obj 对应的keyDatas里的对象\n             * @param node 对应的node节点\n             * @param el 节点组件本身\n             */\n            clickTypeTree(obj, node, el) {\n                if(node.checked) { // 取消\n                    this.$refs.typeTree.setChecked(obj, false, false);\n                } else { // 勾选\n                    this.$refs.typeTree.setChecked(obj, true, false);\n                }\n            },\n            /***\n             * 新增节点：初始化数据，并展示弹窗\n             */\n            startAddType() {\n                const CHECKED_NODES = this.$refs.typeTree.getCheckedNodes();\n                if(CHECKED_NODES.length > 1) {\n                    // 选择了多个节点\n                    this.$message.warning('请选择一个父节点!');\n                    return;\n                } else if(CHECKED_NODES.length === 0) {\n                    // 新增一级节点\n                    this.sParent = '无';\n                    this.sLevel = '一级';\n                    this.typeForm = {\n                        name: '',\n                        code: ''\n                    };\n                } else {\n                    const PLEVEL = (this.$refs.typeTree.getNode(CHECKED_NODES[0].id)).level; // 父节点的level\n                    // 新增下级节点\n                    this.sParent = CHECKED_NODES[0].name;\n                    this.sLevel = this.aLevel[PLEVEL + 1];\n                    this.typeForm = {\n                        pid: CHECKED_NODES[0].id,\n                        name: '',\n                        code: ''\n                    };\n                }\n                this.addTypeTitle = '添加节点';\n                this.addTypeVisible = true;\n            },\n            /***\n             * 编辑节点：初始化数据 并展示弹窗\n             */\n            startEditType() {\n                const CHECKED_NODES = this.$refs.typeTree.getCheckedNodes();\n                if(CHECKED_NODES.length !== 1) {\n                    // 选择了多个节点，或者没有勾选\n                    this.$message.warning('请选择一个节点!');\n                    return;\n                }\n                const LEVEL = (this.$refs.typeTree.getNode(CHECKED_NODES[0].id)).level; // 自己的level\n                if(LEVEL > 1) {\n                    this.sParent = (this.$refs.typeTree.getNode(CHECKED_NODES[0].id).parent).data.name; // 父节点的name\n                } else {\n                    this.sParent = '无';\n                }\n                this.sLevel = this.aLevel[LEVEL];\n                this.typeForm = {\n                    id: CHECKED_NODES[0].id,\n                    name: CHECKED_NODES[0].name,\n                    code: CHECKED_NODES[0].code\n                };\n                this.addTypeTitle = '修改节点';\n                this.addTypeVisible = true;\n            },\n            /***\n             * 校验表单\n             */\n            checkForm() {\n                if(this.typeForm.name.trim() === '') {\n                    this.$message.warning('请填写节点名称!');\n                    return false;\n                }\n                if((this.typeForm.code+'').trim() === '') {\n                    this.$message.warning('请填写节点代码!');\n                    return false;\n                }\n                return true;\n            },\n            /***\n             * 提交表单\n             */\n            submitTypeForm() {\n                if(!this.checkForm()) return;\n                if(this.typeForm.id) {\n                    this.editType();\n                } else {\n                    this.addType();\n                }\n            },\n            /***\n             * 更新子节点\n             * @param parentData 父节点对应的data数据\n             */\n            updateChildren(parentData) {\n                let requestData = {};\n                if(!parentData) {\n                    requestData = {\n                        pageNum: this.page,\n                        pageSize: this.pageSize\n                    }\n                } else {\n                    requestData = {\n                        pid: parentData.id\n                    }\n                }\n\n                if(!parentData) {\n                    this.showTree = false;\n                    setTimeout(() => {\n                        this.showTree = true;\n                    }, 200);\n                } else {\n                    this.getCategoryListAction(requestData).then(res => {\n                        this.$refs.typeTree.updateKeyChildren(parentData.id, res.list);\n                        setTimeout(() => {\n                            this.setWidth();\n                        }, 200);\n                    }).catch(e => {\n                        this.$message.error(e);\n                    });\n                }\n            },\n            /***\n             * 新增节点：调用接口\n             */\n            addType() {\n                this.addCategoryAction(this.typeForm).then(res => {\n                    this.$message.success('新增成功！');\n                    this.addTypeVisible = false;\n                    // 刷新子节点\n                    const CHECKED_NODES = this.$refs.typeTree.getCheckedNodes();\n                    if(CHECKED_NODES.length === 0) {\n                        this.updateChildren();\n                    } else {\n                        this.updateChildren(CHECKED_NODES[0]);\n                    }\n                }).catch(e => {\n                    this.$message.error(e);\n                })\n            },\n            /***\n             * 编辑节点：调用接口\n             */\n            editType() {\n                this.updateCategoryAction(this.typeForm).then(res => {\n                    this.$message.success('修改成功！');\n                    this.addTypeVisible = false;\n                    // 刷新子节点\n                    const CHECKED_NODES = this.$refs.typeTree.getCheckedNodes();\n                    if(CHECKED_NODES[0].classify === 1) {\n                        this.updateChildren();\n                    } else {\n                        this.updateChildren(this.$refs.typeTree.getNode(CHECKED_NODES[0].id).parent.data);\n                    }\n                }).catch(e => {\n                    this.$message.error(e);\n                })\n            },\n            startDeleteType() {\n                const DEL_ARR = this.$refs.typeTree.getCheckedKeys();\n                if(DEL_ARR.length === 0) {\n                    this.$message.warning('请选择要删除的节点!');\n                    return;\n                } else if (DEL_ARR.length > 1) {\n                    this.$message.warning('请选择一个节点!');\n                    return;\n                }\n                this.$confirm('确认删除选中节点及其子节点？', '提示', {\n                    confirmButtonText: '确定',\n                    showCancelButton: false,\n                    type: 'warning'\n                }).then(() => {\n                    this.deleteType();\n                }).catch((action) => {\n                    console.log(action);\n                })\n            },\n            /***\n             * 删除节点\n             */\n            deleteType() {\n                const DEL_ARR = this.$refs.typeTree.getCheckedKeys();\n                this.deleteCategoryAction({id: DEL_ARR[0]}).then(res => {\n                    this.$message.success('删除成功！');\n                    // 刷新子节点\n                    const CHECKED_NODES = this.$refs.typeTree.getCheckedNodes();\n                    if(CHECKED_NODES[0].classify === 1) {\n                        this.updateChildren();\n                    } else {\n                        this.updateChildren(this.$refs.typeTree.getNode(CHECKED_NODES[0].id).parent.data);\n                    }\n                }).catch(e => {\n                    this.$message.error(e);\n                })\n            }\n        },\n        filters: {},\n        watch: {},\n        destroyed() {\n        },\n        beforeRouteLeave(to, from, next) {\n            next();\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .el-table {\n        margin-top: 10px;\n        th {\n            padding: 4px 0;\n            background-color: #f5f7fa;\n        }\n    }\n    .custom-tree-node {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        font-size: 14px;\n        padding-right: 8px;\n        .-type {\n            flex-grow: 1;\n        }\n        .-field {\n            padding-left: 20px;\n        }\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/quota/subs/BasicQuotaType.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"handle-panel bg-gray-lightest p-10\"},[_c('el-button',{attrs:{\"size\":\"small\",\"icon\":\"el-icon-circle-plus-outline\",\"type\":\"primary\"},on:{\"click\":_vm.startAddType}},[_vm._v(\"新增下级节点\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"size\":\"small\",\"icon\":\"el-icon-edit\"},on:{\"click\":_vm.startEditType}},[_vm._v(\"修改\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"size\":\"small\",\"icon\":\"el-icon-delete\"},on:{\"click\":_vm.startDeleteType}},[_vm._v(\"删除\")])],1),_vm._v(\" \"),_c('div',{staticClass:\"list-box\"},[_vm._m(0),_vm._v(\" \"),(_vm.showTree)?_c('div',[_c('el-tree',{ref:\"typeTree\",attrs:{\"node-key\":\"id\",\"props\":_vm.typeTreeProp,\"load\":_vm.loadSubTypes,\"lazy\":\"\",\"expand-on-click-node\":false,\"check-strictly\":\"\",\"empty-text\":\"暂无基础指标类型\",\"show-checkbox\":\"\"},on:{\"node-click\":_vm.clickTypeTree},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar node = ref.node;\nvar data = ref.data;\nreturn _c('span',{staticClass:\"custom-tree-node\"},[_c('span',{staticClass:\"-type\"},[_vm._v(_vm._s(_vm.aLevel[node.level] + '节点'))]),_vm._v(\" \"),_c('span',{staticClass:\"-field\"},[_vm._v(_vm._s(data.name))]),_vm._v(\" \"),_c('span',{staticClass:\"-field\"},[_vm._v(_vm._s(data.code))]),_vm._v(\" \"),_c('span',{staticClass:\"-field\"},[_vm._v(_vm._s(_vm.aLevel[node.level]))])])}}])})],1):_vm._e(),_vm._v(\" \"),(_vm.categoryTotal > 0)?_c('el-pagination',{staticClass:\"text-right m-t-20\",attrs:{\"layout\":\"prev, pager, next\",\"current-page\":_vm.page,\"page-size\":_vm.pageSize,\"total\":_vm.categoryTotal},on:{\"update:currentPage\":function($event){_vm.page=$event},\"current-change\":_vm.getQuotaTypeDatas}}):_vm._e()],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":_vm.addTypeTitle,\"visible\":_vm.addTypeVisible,\"width\":\"400px\"},on:{\"update:visible\":function($event){_vm.addTypeVisible=$event}}},[_c('el-form',{attrs:{\"model\":_vm.typeForm}},[_c('el-form-item',{attrs:{\"label\":\"名称\",\"label-width\":_vm.formLabelWidth}},[_c('el-input',{attrs:{\"placeholder\":\"请输入节点名称\",\"auto-complete\":\"off\"},model:{value:(_vm.typeForm.name),callback:function ($$v) {_vm.$set(_vm.typeForm, \"name\", $$v)},expression:\"typeForm.name\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"代码\",\"label-width\":_vm.formLabelWidth}},[_c('el-input',{attrs:{\"placeholder\":\"请输入节点代码\",\"auto-complete\":\"off\"},model:{value:(_vm.typeForm.code),callback:function ($$v) {_vm.$set(_vm.typeForm, \"code\", $$v)},expression:\"typeForm.code\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"级别\",\"label-width\":_vm.formLabelWidth}},[_c('span',[_vm._v(_vm._s(_vm.sLevel))])]),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"父节点\",\"label-width\":_vm.formLabelWidth}},[_c('span',[_vm._v(_vm._s(_vm.sParent))])])],1),_vm._v(\" \"),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.addTypeVisible = false}}},[_vm._v(\"取 消\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.submitTypeForm}},[_vm._v(\"确 定\")])],1)],1)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"el-table el-table--fit el-table--border el-table--enable-row-hover\",staticStyle:{\"width\":\"100%\"}},[_c('div',{staticClass:\"el-table__header-wrapper\"},[_c('table',{staticClass:\"el-table__header\",staticStyle:{\"width\":\"100%\"},attrs:{\"cellpadding\":\"0\",\"cellspacing\":\"0\",\"border\":\"0\"}},[_c('thead',[_c('tr',[_c('th',{staticClass:\"text-black\"},[_c('div',{staticClass:\"cell\"},[_vm._v(\"节点类型\")])]),_vm._v(\" \"),_c('th',{staticClass:\"text-black\"},[_c('div',{staticClass:\"cell\"},[_vm._v(\"名称\")])]),_vm._v(\" \"),_c('th',{staticClass:\"text-black\"},[_c('div',{staticClass:\"cell\"},[_vm._v(\"代码\")])]),_vm._v(\" \"),_c('th',{staticClass:\"text-black\"},[_c('div',{staticClass:\"cell\"},[_vm._v(\"级别\")])])])])])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-d85803b8\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/quota/subs/BasicQuotaType.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d85803b8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./BasicQuotaType.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./BasicQuotaType.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./BasicQuotaType.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-d85803b8\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./BasicQuotaType.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-d85803b8\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/quota/subs/BasicQuotaType.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}